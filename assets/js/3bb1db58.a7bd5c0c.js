"use strict";(self.webpackChunkcyclops_ui_docs=self.webpackChunkcyclops_ui_docs||[]).push([[1226],{28405:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});var r=s(74848),n=s(28453);const o={},l="Overview",i={id:"templates/templates",title:"Overview",description:"Cyclops renders the New Module form based on your Helm templates. We have a public templates repository where we created a couple of charts you can use. Alternatively, you can create your own Helm charts and use them as templates.",source:"@site/docs/templates/templates.md",sourceDirName:"templates",slug:"/templates/",permalink:"/docs/templates/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Feedback",permalink:"/docs/installation/demo/feedback"},next:{title:"Template Storage",permalink:"/docs/templates/template_storage"}},c={},a=[];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(t.p,{children:["Cyclops renders the ",(0,r.jsx)(t.em,{children:"New Module"})," form based on your Helm templates. We have a public ",(0,r.jsx)(t.a,{href:"https://github.com/cyclops-ui/templates",children:"templates repository"})," where we created a couple of charts you can use. Alternatively, you can create your own Helm charts and use them as templates."]}),"\n",(0,r.jsxs)(t.p,{children:["Although we have a ",(0,r.jsx)(t.strong,{children:"GitHub repository"})," to store our charts, there are other ways of storing them. Cyclops can access charts stored in three different ways:"]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"1. GitHub Repository"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"2. Helm Chart Repository"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"3. OCI Repository"})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsxs)(t.strong,{children:[(0,r.jsx)(t.code,{children:"values.schema.json"})," is a necessary component"]})," in your templates. This file is usually used to impose a structure on the ",(0,r.jsx)(t.code,{children:"values.yaml"})," file, but it is also crucial for rendering the GUI in Cyclops."]}),"\n",(0,r.jsxs)(t.p,{children:["You can learn more about it and how to create one by following ",(0,r.jsx)(t.a,{href:"https://helm.sh/docs/topics/charts/#schema-files",children:"Helm docs"}),". The schema is represented as a ",(0,r.jsx)(t.a,{href:"https://json-schema.org/",children:"JSON Schema"})]}),"\n",(0,r.jsx)(t.p,{children:"You can find a list of all the fields you can set below for each field type."}),"\n",(0,r.jsx)(t.p,{children:"In addition to the usual schema, we added more fields to help our users get as much from the UI as possible."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,r.jsx)(t.th,{children:"Valid input"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"order"})}),(0,r.jsx)(t.td,{children:"string array"}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["Defines the order of the fields in an object type property. ",(0,r.jsx)("br",{})," Each time you use ",(0,r.jsx)(t.code,{children:"properties"}),", you should also define the order of those properties"]}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"fileExtension"})}),(0,r.jsx)(t.td,{children:"string"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Sometimes, you would like your text field not just to be a field but also to get some highlighting based on the type of string you are saving. You can specify that in this field"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"text"}),", ",(0,r.jsx)(t.code,{children:"sh"}),", ",(0,r.jsx)(t.code,{children:"json"}),", ",(0,r.jsx)(t.code,{children:"yaml"}),", ",(0,r.jsx)(t.code,{children:"toml"}),", ",(0,r.jsx)(t.code,{children:"javascript"}),", ",(0,r.jsx)(t.code,{children:"typescript"})]})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>i});var r=s(96540);const n={},o=r.createContext(n);function l(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);