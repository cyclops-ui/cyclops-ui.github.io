"use strict";(self.webpackChunkcyclops_ui_docs=self.webpackChunkcyclops_ui_docs||[]).push([[9001],{9144:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var s=n(74848),i=n(28453);const o={},r="Prerequisites",c={id:"installation/prerequisites",title:"Prerequisites",description:"In order to test out Cyclops you are going to need some things. First thing you are going to need is a Kubernetes",source:"@site/docs/installation/prerequisites.md",sourceDirName:"installation",slug:"/installation/prerequisites",permalink:"/docs/installation/prerequisites",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Core concepts",permalink:"/docs/concepts/"},next:{title:"Install",permalink:"/docs/installation/install"}},a={},l=[];function u(e){const t={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(t.p,{children:["In order to test out Cyclops you are going to need some things. First thing you are going to need is a Kubernetes\ncluster. If you have one that you can use to play with, great, if not you can try installing\n",(0,s.jsx)(t.a,{href:"https://minikube.sigs.k8s.io/",children:"minikube"}),". Minikube sets up a local Kubernetes cluster that you can use to test stuff\nout. Check the ",(0,s.jsx)(t.a,{href:"https://minikube.sigs.k8s.io/docs/start/",children:"docs"})," on how to install it."]}),"\n",(0,s.jsxs)(t.p,{children:["Another thing you will need is ",(0,s.jsx)(t.a,{href:"https://kubernetes.io/docs/tasks/tools/",children:"kubectl"}),". It is a command line interface for\nrunning commands against your cluster."]}),"\n",(0,s.jsx)(t.p,{children:"Once you have installed minikube and kubectl, run your local cluster with:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"minikube start\n"})}),"\n",(0,s.jsx)(t.p,{children:"After some time you will have a running cluster that you can use for testing. To verify everything is in order, you can\ntry fetching all namespaces from the cluster with:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kubectl get namespaces\n"})}),"\n",(0,s.jsx)(t.p,{children:"Output should be something like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"NAME              STATUS   AGE\ndefault           Active   10m\nkube-node-lease   Active   10m\nkube-public       Active   10m\nkube-system       Active   10m\n...\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(96540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);